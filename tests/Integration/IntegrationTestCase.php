<?php

namespace LastCall\DownloadsPlugin\Tests\Integration;

use PHPUnit\Framework\TestCase;
use Symfony\Component\Filesystem\Filesystem;

class IntegrationTestCase extends TestCase
{
    public static function getComposerJson(): array
    {
        return [
            'authors' => [
                [
                    'name' => 'Tester McFakus',
                    'email' => 'tester@example.org',
                ],
            ],

            'repositories' => [
                'composer-downloads-plugin' => [
                    'type' => 'path',
                    'url' => self::getPluginSourceDir(),
                ],
            ],
        ];
    }

    /**
     * @return string The root folder of the composer-downloads-plugin
     */
    public static function getPluginSourceDir(): string
    {
        return \dirname(__DIR__);
    }

    /**
     * @return string The path of the autogenerated composer project
     */
    public static function getTestDir(): string
    {
        return self::$testDir;
    }

    private static ?string $origDir;
    private static ?string $testDir;

    /**
     * Create a temp folder with a "composer.json" file and chdir() into it.
     */
    public static function initTestProject(array $composerJson): string
    {
        self::$origDir = getcwd();
        $testDir = getenv('USE_TEST_PROJECT');
        if (\is_string($testDir)) {
            self::$testDir = $testDir;
            @unlink(self::$testDir.\DIRECTORY_SEPARATOR.'composer.lock');
        } else {
            self::$testDir = sys_get_temp_dir().\DIRECTORY_SEPARATOR.'assetplg-'.md5(__DIR__.time().random_int(0, 10000));
            self::cleanDir(self::$testDir);
        }

        if (!is_dir(self::$testDir)) {
            mkdir(self::$testDir);
        }
        file_put_contents(self::$testDir.\DIRECTORY_SEPARATOR.'composer.json', json_encode($composerJson, \JSON_PRETTY_PRINT | \JSON_UNESCAPED_SLASHES));
        chdir(self::$testDir);

        return self::$testDir;
    }

    public static function tearDownAfterClass(): void
    {
        parent::tearDownAfterClass();

        if (self::$testDir) {
            chdir(self::$origDir);
            self::$origDir = null;

            if (getenv('USE_TEST_PROJECT')) {
                fwrite(\STDERR, sprintf("\n\nTest project location (%s): %s\n", self::class, self::$testDir));
            } else {
                self::cleanDir(self::$testDir);
            }
            self::$testDir = null;
        }
    }

    /**
     * If a directory exists, remove it.
     */
    protected static function cleanDir(string $dir): void
    {
        $filesystem = new Filesystem();
        $filesystem->remove($dir);
    }
}
